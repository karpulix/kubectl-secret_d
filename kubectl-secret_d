#!/bin/bash

# kubectl-secret-d - A kubectl plugin to decode secret data
# Usage: kubectl secret-d <secret-name> [-n namespace] [-o yaml]

# Function to decode base64
decode_base64() {
    echo "$1" | base64 -d
}

# Function to process secret data
process_secret() {
    local secret_data="$1"
    local output_format="$2"
    
    if [ "$output_format" = "yaml" ]; then
        # Convert data to stringData in YAML format
        echo "$secret_data" | yq e -P '.stringData = (.data | map_values(@base64d)) | del(.data)' -
    else
        # Display decoded key-value pairs
        echo "$secret_data" | yq e '.data | to_entries | .[] | .key + ": " + (.value | @base64d)' -
    fi
}

# Parse arguments
SECRET_NAME=""
NAMESPACE=""
OUTPUT_FORMAT=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--namespace)
            NAMESPACE="-n $2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        *)
            SECRET_NAME="$1"
            shift
            ;;
    esac
done

# Check if secret name is provided
if [ -z "$SECRET_NAME" ]; then
    echo "Error: Secret name is required"
    echo "Usage: kubectl secret-d <secret-name> [-n namespace] [-o yaml]"
    exit 1
fi

# Get secret data
SECRET_DATA=$(kubectl get secret "$SECRET_NAME" $NAMESPACE -o yaml 2>/dev/null)

if [ $? -ne 0 ]; then
    echo "Error: Failed to get secret $SECRET_NAME"
    exit 1
fi

# Process and display the secret data
process_secret "$SECRET_DATA" "$OUTPUT_FORMAT" 